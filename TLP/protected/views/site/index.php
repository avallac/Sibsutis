<?php
/* @var $this SiteController */

$this->pageTitle=Yii::app()->name;
?>

<h1>Работа по предмету "<i><?php echo CHtml::encode(Yii::app()->name); ?></i>"</h1>

<h2>Лабораторная работа №1 Генерация цепочек языка - <a href="<?= Yii::app()->createUrl('lab1') ?>">Перейти</a></h2>
<p align="justify">
&nbsp;&nbsp;&nbsp;&nbsp;Пусть язык задан контекстно-свободной грамматикой. Написать программу, которая по заданной грамматике будет генерировать ВСЕ цепочки языка в некотором диапазоне длин. Использовать только левосторонний или правосторонний вывод! Диапазон длин генерируемых цепочек должен задаваться пользователем при запуске программы.<br>
&nbsp;&nbsp;&nbsp;&nbsp;Предусмотреть возможность выбора пользователю – использовать заданную в программе грамматику или вводить свою с клавиатуры.<br>
&nbsp;&nbsp;&nbsp;&nbsp;На вход программы подаётся КС-грамматика (терминальный и нетерминальный алфавиты, целевой символ, правила вывода), задаётся диапазон длин цепочек, указывается тип вывода (левосторонний или правосторонний).<br>
&nbsp;&nbsp;&nbsp;&nbsp;Рекомендуется для ввода исходных данных использовать соответствующую форму. При вводе правил грамматики не рекомендуется предоставлять пользователю излишнюю свободу действий, например, удобнее запретить ввод в левой части правил более чем одного нетерминального символа, чем проверять введённые правила на соответствие контекстно-свободному типу.<br>
&nbsp;&nbsp;&nbsp;&nbsp;На выходе должен быть список построенных цепочек. Все цепочки в списке должны быть различны. При получении одинаковых цепочек (разными способами) их следует сохранять в списке выводимых цепочек только в случае выполнения дополнительного задания.<br>
&nbsp;&nbsp;&nbsp;&nbsp;Проверить программу на примерах из лекционного курса и на заданиях из контрольных вопросов к теоретической части.<br>
&nbsp;&nbsp;&nbsp;&nbsp;Дополнительно: Дополнить предыдущую программу таким образом, чтобы для одной или нескольких цепочек (цепочки выбирает пользователь из числа построенных на предыдущем этапе работы) строилось дерево вывода, т.е. была структурно представлена последовательность правил, использованных при построении цепочки.<br>
</p>


<h2>Лабораторная работа №2 Моделирование работы ДКА - <a href="<?= Yii::app()->createUrl('lab2') ?>">Перейти</a></h2>
<p align="justify">
&nbsp;&nbsp;&nbsp;&nbsp;Пусть регулярный язык задаётся конечным автоматом – ДКА. Написать программу, которая будет проверять по заданному автомату вводимую цепочку и делать вывод о том, принадлежит ли она рассматриваемому регулярному языку. В случае отрицательного ответа необходимо давать пояснение, по какой причине цепочка не принадлежит языку – например, «в цепочке присутствуют посторонние символы», «после прочтения цепочки автомат не пришёл в конечное состояние» и т.п. Исходный автомат вводить с клавиатуры в соответствии с определённым форматом. Ввод цепочек также производить с клавиатуры.<br>
&nbsp;&nbsp;&nbsp;&nbsp;На вход программы подаётся ДКА (множество состояний, алфавит языка, начальное состояние, множество заключительных состояний, функция переходов в виде таблицы) и проверяемая цепочка символов (может вводиться многократно, т.е. возможно проверить любое количество цепочек). При этом в проверяемую цепочку могут входить и символы, не принадлежащие алфавиту языка; цепочка может быть и пустой.<br>
&nbsp;&nbsp;&nbsp;&nbsp;Программа должна предоставлять пользователю возможность изменять начальное и конечные состояния с сохранением введённой функции переходов для заданного автомата.<br>
&nbsp;&nbsp;&nbsp;&nbsp;Выход – отображение на экране процесса проверки цепочки в виде последовательной смены конфигураций и вывод результата – сообщения, принадлежит ли цепочка языку.<br>
</p>

<h2>Лабораторная работа №3 Моделирование работы МПА - <a href="<?= Yii::app()->createUrl('lab3') ?>">Перейти</a></h2>
<p align="justify">
&nbsp;&nbsp;&nbsp;&nbsp;Пусть контекстно-свободный язык задаётся детерминированным автоматом с магазинной памятью – ДМПА. Написать программу, которая будет проверять для вводимой цепочки, принадлежит ли она заданному КС-языку. В случае отрицательного ответа необходимо давать пояснение, по какой причине цепочка не принадлежит языку (аналогично лаб. раб No2) Исходный автомат вводить с клавиатуры в соответствии с определённым форматом. Ввод цепочек также производить с клавиатуры, выполняя его до тех пор, пока не возникнет желание закончить работу.<br>
&nbsp;&nbsp;&nbsp;&nbsp;На вход программы подаётся ДМПА (множество состояний, алфавит языка, алфавит магазина, начальное состояние, начальное содержимое стека, множество заключительных состояний, функция переходов в виде списка правил) и проверяемая цепочка символов (может вводиться многократно, т.е. возможно проверить любое количество цепочек). При этом в проверяемую цепочку могут входить и символы, не принадлежащие алфавиту языка; цепочка может быть и пустой.<br>
&nbsp;&nbsp;&nbsp;&nbsp;Рекомендуется для ввода исходных данных использовать соответствующую форму с полями выбора. При вводе функции переходов не рекомендуется предоставлять пользователю излишнюю свободу действий.<br>
&nbsp;&nbsp;&nbsp;&nbsp;Выход – отображение на экране процесса проверки цепочки в виде последовательной смены конфигураций и вывод результата – сообщения, принадлежит ли цепочка языку.<br>
&nbsp;&nbsp;&nbsp;&nbsp;Внимание!!! В ходе проверки цепочки ДМПА может проделывать пустые такты не только после прочтения всей цепочки, но и в её середине. Внимательно прочтите соответствующий раздел лекций 3.1.<br>
&nbsp;&nbsp;&nbsp;&nbsp;Проверить работу программы на примерах из лекций и задачах из контрольных вопросов.<br>
&nbsp;&nbsp;&nbsp;&nbsp;Дополнительно: Предоставить пользователю возможность вносить некоторые изменения в исходные данные без полного их обновления.<br>
</p>
<h2>Лабораторная работа №4 Перевод с помощью СУ-схемы - <a href="<?= Yii::app()->createUrl('lab4') ?>">Перейти</a></h2>
<p align="justify">
&nbsp;&nbsp;&nbsp;&nbsp;Пусть дана схема синтаксически управляемого перевода. Написать программу, которая будет выполнять перевод цепочек с одного языка на другой в соответствии с этой схемой. При невозможности выполнить перевод (цепочка не строится по правилам входной грамматики) необходимо выводить на экран соответствующее сообщение.<br>
&nbsp;&nbsp;&nbsp;&nbsp;Правила СУ-схемы считывать из файла (предоставив пользователю возможность редактировать их на экране); цепочки вводить с клавиатуры, процесс перевода отображать на экране. Предусмотреть возможность выполнения перевода любого количества цепочек для заданной схемы.<br>
&nbsp;&nbsp;&nbsp;&nbsp;На вход программы подаётся схема СУ-перевода (алфавиты входного и выходного языков, множество нетерминальных символов, правила вывода, целевой символ) и цепочка языка, которую необходимо перевести (может вводиться многократно, т.е. возможно перевести любое количество цепочек). Цепочка может быть и не относящейся к исходному языку...<br>
&nbsp;&nbsp;&nbsp;&nbsp;Работа программы может быть организована по-разному. В качестве основного задания допустимо использовать материалы лабораторной работы No1. На первом этапе в соответствии с входной грамматикой схемы СУ-перевода попытаться сгенерировать цепочку, поданную на вход (поскольку её длина известна, можно генерировать только цепочки этой длины). При генерации фиксировать номера использованных правил. В случае успешной генерации выполнить второй этап – применяя номера использованных правил, получать одновременно входную и выходную цепочки по правилу вывода и соответствующему ему элементу перевода.<br>
&nbsp;&nbsp;&nbsp;&nbsp;На выходе – отображение процесса перевода и результирующая цепочка языка.<br>
&nbsp;&nbsp;&nbsp;&nbsp;Дополнительно: Вместо попыток генерации исходной цепочки сделать её разбор каким-либо способом из числа рассмотренных в теоретическом курсе. Например, использовать разбор с возвратами, нисходящий или восходящий (). В таком случае первый этап работы программы изменится на распознавание цепочки, т.е. на нём будет выполняться проверка цепочки построенным распознавателем. На выходе будут получены номера правил, по которым цепочка строилась. Второй этап – перевод с помощью схемы СУ-перевода – полностью совпадает с основным заданием.<br>
</p>
<h2>Лабораторная работа №5 Перевод с помощью МП-преобразователя - <a href="<?= Yii::app()->createUrl('lab5') ?>">Перейти</a></h2>
&nbsp;&nbsp;&nbsp;&nbsp;Пусть дан преобразователь с магазинной памятью; написать программу, которая будет выполнять перевод цепочек с одного языка на другой с помощью заданного преобразователя. При невозможности выполнить перевод (цепочка не принадлежит исходному языку) необходимо выводить на экран соответствующее сообщение.<br>
&nbsp;&nbsp;&nbsp;&nbsp;Исходный преобразователь вводить с клавиатуры в соответствии с определённым форматом. Ввод цепочек также производить с клавиатуры, выполняя его до тех пор, пока не возникнет желание закончить работу. Процесс перевода цепочки в виде последовательной смены конфигураций отображать на экране.<br>
&nbsp;&nbsp;&nbsp;&nbsp;На вход программы подаётся ДМП-преобразователь (множество состояний, алфавиты входного и выходного языков, алфавит магазина, начальное состояние, начальное содержимое стека, множество заключительных состояний, функция переходов в виде списка правил) и проверяемая цепочка символов (аналогично лаб. раб. No3).<br>
&nbsp;&nbsp;&nbsp;&nbsp;Рекомендуется за основу взять программу лабораторной работы No3, дополнив исходные данные выходным алфавитом, функцию переходов – в соответствии с определением преобразователя, а конфигурации – выходными цепочками.<br>
&nbsp;&nbsp;&nbsp;&nbsp;Выход: отображение на экране процесса перевода цепочки в виде последовательной смены конфигураций преобразователя, результат перевода – полученная цепочка.<br>
&nbsp;&nbsp;&nbsp;&nbsp;Проверить работу программы на примерах из лекций и задачах из контрольных вопросов.<br>
</p>

<h2>Курсовая работа - <a href="<?= Yii::app()->createUrl('lab6') ?>">Перейти</a></h2>
<p align="justify">
&nbsp;&nbsp;&nbsp;&nbsp;Написать программу, которая по заданной регулярной грамматике (грамматика может быть НЕ автоматного вида!, ЛЛ или ПЛ) построит эквивалентный ДКА (представление функции переходов в виде табли- цы). Программа должна сгенерировать по исходной грамматике несколько цепочек в заданном диапазоне длин и проверить их допусти- мость построенным автоматом. Процессы построения цепочек и проверки их выводимости отображать на экране (по требованию). Предусмотреть возможность проверки цепочки, введённой пользователем.
</p>